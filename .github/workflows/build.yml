name: 构建多平台可执行文件

on:
  push:
    tags:
      - 'v*'  # 当推送版本标签时触发
  workflow_dispatch:  # 支持手动触发

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact: VideoCompressor-Windows.zip
          - os: macos-latest
            platform: macos
            artifact: VideoCompressor-macOS.zip
    
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  # 使用更稳定的Python 3.10
    
    - name: 安装系统依赖 (macOS)
      if: matrix.platform == 'macos'
      run: |
        # 安装macOS系统依赖
        brew install create-dmg
    
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        # 使用最新稳定版本的PyQt5
        pip install PyQt5 --no-cache-dir
        pip install requests pyinstaller Pillow
        echo "依赖安装完成"
    
    - name: 创建默认图标
      run: |
        python -c "
        import os
        import sys
        from pathlib import Path
        
        # 设置UTF-8编码（避免Windows编码问题）
        if sys.platform.startswith('win'):
            import locale
            import codecs
            sys.stdout = codecs.getwriter('utf-8')(sys.stdout.detach())
            sys.stderr = codecs.getwriter('utf-8')(sys.stderr.detach())
        
        # 确保图标目录存在
        icons_dir = Path('resources/icons')
        icons_dir.mkdir(parents=True, exist_ok=True)
        
        # 创建简单的占位符图标文件
        ico_path = icons_dir / 'app.ico'
        icns_path = icons_dir / 'app.icns'
        
        # 如果图标不存在，创建空文件
        if not ico_path.exists():
            ico_path.write_bytes(b'')
        if not icns_path.exists():
            icns_path.write_bytes(b'')
            
        print('Icon files ready')
        "
    
    - name: Windows打包
      if: matrix.platform == 'windows'
      run: |
        # 直接使用PyInstaller命令行打包，包含资源文件
        pyinstaller --onedir --windowed --name=VideoCompressor --icon=resources/icons/app.ico --add-data="resources;resources" --add-data="config.json;." main.py
        Compress-Archive -Path dist/VideoCompressor -DestinationPath VideoCompressor-Windows.zip
    
    - name: macOS打包
      if: matrix.platform == 'macos'
      run: |
        # 直接使用PyInstaller命令行打包，包含资源文件
        pyinstaller --onedir --windowed --name=VideoCompressor --icon=resources/icons/app.icns --add-data="resources:resources" --add-data="config.json:." main.py
        zip -r VideoCompressor-macOS.zip dist/VideoCompressor.app
    
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}
    
    - name: 创建Release（仅标签推送时）
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: ${{ matrix.artifact }}
        draft: false
        prerelease: false 