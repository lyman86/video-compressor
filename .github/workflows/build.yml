name: 构建多平台可执行文件

on:
  push:
    tags:
      - 'v*'  # 当推送版本标签时触发
  workflow_dispatch:  # 支持手动触发

# 设置必要的权限
permissions:
  contents: write  # 创建release需要的权限
  actions: read

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            platform: windows
            artifact: VideoCompressor-Windows.zip
          - os: macos-latest
            platform: macos
            artifact: VideoCompressor-macOS.zip
    
    runs-on: ${{ matrix.os }}
    timeout-minutes: 60  # 增加超时时间到60分钟
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  # 使用更稳定的Python 3.10
    
    - name: 安装Python依赖
      run: |
        python -m pip install --upgrade pip
        # 使用特定版本避免兼容性问题
        pip install PyQt5==5.15.10 --no-cache-dir
        pip install requests==2.31.0 pyinstaller==6.3.0 Pillow==10.1.0
        echo "Dependencies installed successfully"
    
    - name: 准备图标文件
      run: |
        python -c "
        import os
        import sys
        from pathlib import Path
        
        # 确保图标目录存在
        icons_dir = Path('resources/icons')
        icons_dir.mkdir(parents=True, exist_ok=True)
        
        print('Icons directory ready')
        "
    
    - name: Windows打包
      if: matrix.platform == 'windows'
      run: |
        # 使用简化的打包命令
        pyinstaller --onefile --windowed --name=VideoCompressor --add-data="resources;resources" --add-data="config.json;." main.py
        # 创建包含exe的目录结构
        mkdir VideoCompressor-Windows
        copy dist\VideoCompressor.exe VideoCompressor-Windows\
        # Create simple usage instructions
        echo "VideoCompressor - Video Compression Tool" > VideoCompressor-Windows\README.txt
        echo "Double-click VideoCompressor.exe to start the program" >> VideoCompressor-Windows\README.txt
        Compress-Archive -Path VideoCompressor-Windows -DestinationPath VideoCompressor-Windows.zip
    
    - name: macOS打包
      if: matrix.platform == 'macos'
      timeout-minutes: 45  # macOS构建增加更多时间
      run: |
        # 使用简化的打包命令
        pyinstaller --onefile --windowed --name=VideoCompressor --add-data="resources:resources" --add-data="config.json:." main.py
        # 创建包含app的目录结构
        mkdir VideoCompressor-macOS
        cp dist/VideoCompressor VideoCompressor-macOS/
        # Create simple usage instructions
        echo "VideoCompressor - Video Compression Tool" > VideoCompressor-macOS/README.txt
        echo "Double-click VideoCompressor to start the program" >> VideoCompressor-macOS/README.txt
        zip -r VideoCompressor-macOS.zip VideoCompressor-macOS
    
    - name: 上传构建产物
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact }}
        path: ${{ matrix.artifact }}
        retention-days: 90

  # 创建release的独立job，在所有构建完成后执行
  release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: 下载所有构建产物
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: 创建Release
      uses: softprops/action-gh-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
          artifacts/VideoCompressor-Windows.zip/VideoCompressor-Windows.zip
          artifacts/VideoCompressor-macOS.zip/VideoCompressor-macOS.zip
        draft: false
        prerelease: false
        name: 视频压缩工具 ${{ github.ref_name }}
        body: |
          ## 视频压缩工具 ${{ github.ref_name }}
          
          ### 下载说明
          - **VideoCompressor-Windows.zip**: Windows 64位版本
          - **VideoCompressor-macOS.zip**: macOS版本（Intel和Apple Silicon）
          
          ### 使用方法
          1. 下载对应平台的压缩包
          2. 解压到任意目录
          3. 运行可执行文件
          
          ### 主要功能
          - 支持多种视频格式压缩
          - 预设压缩方案选择
          - 自定义压缩参数
          - 可选音频保留/移除
          - 现代化图形界面 